#pragma once
/* This was generated by capra_micro_comm.
* DO NOT EDIT
*/

#include <capra_comm.h>

enum RGBModeType : euint8_t
{
    RGB_MODE_STATIC = 0,
    RGB_MODE_FADE2 = 1,
    RGB_MODE_FADE3 = 2,
    RGB_MODE_STRIPE = 3,
    RGB_MODE_FLAG_3 = 4,
    RGB_MODE_FLAG_5 = 5,
    RGB_MODE_2_COLORS = 6,
    RGB_MODE_3_COLORS = 7,
};




// --- STRUCTS ---
struct Void
{
    euint8_t pad0;
};
static_assert(sizeof(Void) == 1);

struct Bool_
{
    eboolean_t b;
};
static_assert(sizeof(Bool_) == 1);

struct Byte
{
    euint8_t b;
};
static_assert(sizeof(Byte) == 1);

struct Short
{
    eint16_t s;
};
static_assert(sizeof(Short) == 2);

struct UShort
{
    euint16_t s;
};
static_assert(sizeof(UShort) == 2);

struct Int
{
    eint32_t i;
};
static_assert(sizeof(Int) == 4);

struct UInt
{
    euint32_t i;
};
static_assert(sizeof(UInt) == 4);

struct Long
{
    eint64_t l;
};
static_assert(sizeof(Long) == 8);

struct ULong
{
    euint64_t l;
};
static_assert(sizeof(ULong) == 8);

struct Float
{
    efloat_t f;
};
static_assert(sizeof(Float) == 4);

struct RGBLed
{
    euint8_t r;
    euint8_t g;
    euint8_t b;
    euint8_t index;
};
static_assert(sizeof(RGBLed) == 4);

struct RGBPattern
{
    RGBModeType mode;
    eint8_t spinRate;
    eint8_t breateRate;
    RGBLed color1;
    RGBLed color2;
    RGBLed color3;
    RGBLed color4;
    RGBLed color5;
};
static_assert(sizeof(RGBPattern) == 23);

// --- COMMANDS ---
Int ping(Int);
static_assert((sizeof(Int)+1) == 5);

ULong hashCheck(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setLEDFront(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ setLEDBack(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ setLEDStrobe(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ getLEDFront(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ getLEDBack(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ getLEDStrobe(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ getGPIO1(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setGPIO1(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ getGPIO2(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setGPIO2(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ getGPIO3(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setGPIO3(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ setRGBPattern(RGBPattern);
static_assert((sizeof(RGBPattern)+1) == 24);

static BaseFunction_ptr commands[] = {
    new Function<Int, Int>(&ping),
    new Function<ULong, Void>(&hashCheck),
    new Function<Bool_, Bool_>(&setLEDFront),
    new Function<Bool_, Bool_>(&setLEDBack),
    new Function<Bool_, Bool_>(&setLEDStrobe),
    new Function<Bool_, Void>(&getLEDFront),
    new Function<Bool_, Void>(&getLEDBack),
    new Function<Bool_, Void>(&getLEDStrobe),
    new Function<Bool_, Void>(&getGPIO1),
    new Function<Bool_, Bool_>(&setGPIO1),
    new Function<Bool_, Void>(&getGPIO2),
    new Function<Bool_, Bool_>(&setGPIO2),
    new Function<Bool_, Void>(&getGPIO3),
    new Function<Bool_, Bool_>(&setGPIO3),
    new Function<Bool_, RGBPattern>(&setRGBPattern),
};
#define COMMANDS_COUNT 15
#define MAX_DECODED_SIZE 24
#define MAX_ENCODED_SIZE 33
#define API_HASH 4563500909845532811UL